name: Deploy to Kubernetes (Staging)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push base image (staging)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-base-staging:v1.0.14

      - name: Build and push Rails image (staging)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dockerfiles/rails.Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-rails-staging:v1.0.14

      - name: Build and push Vite image (staging)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dockerfiles/vite.Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-vite-staging:v1.0.14

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Check for existing cluster
        id: check-cluster
        run: |
          if doctl kubernetes cluster list --format Name | grep -q "chatwoot-cluster"; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "Using existing cluster..."
            doctl kubernetes cluster kubeconfig save chatwoot-cluster
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create terraform.tfvars (staging)
        run: |
          cat > terraform/terraform.tfvars << EOL
          do_token = "${{ secrets.DO_TOKEN }}"
          region = "${{ secrets.REGION }}"
          environment = "staging"
          EOL

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Configure kubectl if cluster was just created
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          echo "Waiting for cluster to be ready after Terraform apply..."
          sleep 60
          doctl kubernetes cluster kubeconfig save chatwoot-cluster

      - name: Update Kubernetes ConfigMap (staging)
        run: |
          kubectl apply -f k8s/staging/configmap.yaml

      - name: Create Kubernetes Secrets (staging)
        run: |
          kubectl delete secret chatwoot-secrets-staging --ignore-not-found=true
          cat > secret-staging.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: chatwoot-secrets-staging
          type: Opaque
          stringData:
            DATABASE_URL: "postgresql://${{ secrets.STAGING_POSTGRES_USERNAME }}:${{ secrets.STAGING_POSTGRES_PASSWORD }}@${{ secrets.STAGING_POSTGRES_HOST }}:${{ secrets.STAGING_POSTGRES_PORT }}/${{ secrets.STAGING_POSTGRES_DATABASE }}?sslmode=require"
            POSTGRES_HOST: "${{ secrets.STAGING_POSTGRES_HOST }}"
            POSTGRES_PORT: "${{ secrets.STAGING_POSTGRES_PORT }}"
            POSTGRES_DATABASE: "${{ secrets.STAGING_POSTGRES_DATABASE }}"
            POSTGRES_USERNAME: "${{ secrets.STAGING_POSTGRES_USERNAME }}"
            POSTGRES_PASSWORD: "${{ secrets.STAGING_POSTGRES_PASSWORD }}"
            REDIS_URL: "${{ secrets.STAGING_REDIS_URL }}"
            REDIS_PASSWORD: "${{ secrets.STAGING_REDIS_PASSWORD }}"
            REDIS_HOST: "${{ secrets.STAGING_REDIS_HOST }}"
            REDIS_PORT: "${{ secrets.STAGING_REDIS_PORT }}"
            SECRET_KEY_BASE: "${{ secrets.STAGING_SECRET_KEY_BASE }}"
            DOMAIN: "staging.cx.aloochat.ai"
            ACTIVE_STORAGE_SERVICE: "${{ secrets.STAGING_ACTIVE_STORAGE_SERVICE }}"
            S3_BUCKET_NAME: "${{ secrets.STAGING_S3_BUCKET_NAME }}"
            AWS_ACCESS_KEY_ID: "${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}"
            AWS_SECRET_ACCESS_KEY: "${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}"
            AWS_REGION: "${{ secrets.STAGING_AWS_REGION }}"
            OPENAI_API_KEY: "${{ secrets.STAGING_OPENAI_API_KEY }}"
            FORCE_SSL: "${{ secrets.STAGING_FORCE_SSL }}"
            CLERK_WEBHOOK_SECRET: "${{ secrets.STAGING_CLERK_WEBHOOK_SECRET }}"
            ALOOSTUDIO_API_TOKEN: "${{ secrets.STAGING_ALOOSTUDIO_API_TOKEN }}"
            ALOOSTUDIO_WEBHOOK_URL: "${{ secrets.STAGING_ALOOSTUDIO_WEBHOOK_URL }}"
            SMTP_PASSWORD: "${{ secrets.STAGING_SMTP_PASSWORD }}"
            SMTP_USERNAME: "${{ secrets.STAGING_SMTP_USERNAME }}"
            SMTP_ADDRESS: "${{ secrets.STAGING_SMTP_ADDRESS }}"
            SMTP_PORT: "${{ secrets.STAGING_SMTP_PORT }}"
            SMTP_DOMAIN: "${{ secrets.STAGING_SMTP_DOMAIN }}"
            SMTP_AUTHENTICATION: "${{ secrets.STAGING_SMTP_AUTHENTICATION }}"
            SMTP_ENABLE_STARTTLS_AUTO: "${{ secrets.STAGING_SMTP_ENABLE_STARTTLS_AUTO }}"
            SMTP_OPENSSL_VERIFY_MODE: "${{ secrets.STAGING_SMTP_OPENSSL_VERIFY_MODE }}"
            MAILER_INBOUND_EMAIL_DOMAIN: "${{ secrets.STAGING_MAILER_INBOUND_EMAIL_DOMAIN }}"
            RAILS_INBOUND_EMAIL_SERVICE: "${{ secrets.STAGING_RAILS_INBOUND_EMAIL_SERVICE }}"
            MAILER_SENDER_EMAIL: "${{ secrets.STAGING_MAILER_SENDER_EMAIL }}"
            ALOOSTUDIO_BACKEND_URL: "${{ secrets.STAGING_ALOOSTUDIO_BACKEND_URL }}"
            ALOOSTUDIO_FRONTEND_URL: "${{ secrets.STAGING_ALOOSTUDIO_FRONTEND_URL }}"
            SMTP_OPEN_TIMEOUT: "60"
            SMTP_READ_TIMEOUT: "60"
          EOF
          kubectl create -f secret-staging.yaml
          rm secret-staging.yaml

      - name: Deploy AlooChat to Kubernetes (staging)
        run: |
          # Apply staging deployments & services
          kubectl apply -n default -f k8s/staging/rails-deployment.yaml
          kubectl apply -n default -f k8s/staging/vite-deployment.yaml
          kubectl apply -n default -f k8s/staging/sidekiq-deployment.yaml
          kubectl apply -n default -f k8s/staging/mailhog-deployment.yaml
          kubectl apply -n default -f k8s/staging/ingress.yaml
          kubectl apply -n default -f k8s/staging/loadbalancer.yaml

          # Wait for all deployments to be ready
          echo "Waiting for Rails deployment (staging)..."
          kubectl rollout status deployment/chatwoot-rails-staging -n default --timeout=300s

          echo "Waiting for Vite deployment (staging)..."
          kubectl rollout status deployment/chatwoot-vite-staging -n default --timeout=300s

          echo "Waiting for Sidekiq deployment (staging)..."
          kubectl rollout status deployment/chatwoot-sidekiq-staging -n default --timeout=300s

          echo "Waiting for Mailhog deployment (staging)..."
          kubectl rollout status deployment/chatwoot-mailhog-staging -n default --timeout=300s

          # Final status checks
          echo "Pods status (staging):"
          kubectl get pods -n default

          echo "Services status (staging):"
          kubectl get svc -n default

          echo "Ingress status (staging):"
          kubectl get ingress -n default
