name: Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      
      # - name: Build and push base image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: ./docker/Dockerfile
      #     push: true
      #     tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-base:latest
      
      - name: Build and push Rails image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dockerfiles/rails.Dockerfile
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/chatwoot-rails:latest
      
      - name: Build and push Vite image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dockerfiles/vite.Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-vite:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Check for existing cluster
        id: check-cluster
        run: |
          if doctl kubernetes cluster list --format Name | grep -q "chatwoot-cluster"; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "Using existing cluster..."
            doctl kubernetes cluster kubeconfig save chatwoot-cluster
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create terraform.tfvars
        run: |
          cat > terraform/terraform.tfvars << EOL
          do_token = "${{ secrets.DO_TOKEN }}"
          region = "${{ secrets.REGION }}"
          environment = "${{ secrets.ENVIRONMENT }}"
          EOL
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Apply
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          cd terraform
          terraform apply -auto-approve
      
      - name: Configure kubectl if cluster was just created
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          echo "Waiting for cluster to be ready after Terraform apply..."
          sleep 60
          doctl kubernetes cluster kubeconfig save chatwoot-cluster
      
      - name: Update Kubernetes ConfigMap
        run: |
          kubectl apply -f k8s/configmap.yaml
      
      - name: Create Kubernetes Secrets
        run: |
          # Delete existing secret if it exists
          kubectl delete secret chatwoot-secrets --ignore-not-found=true
          
          # Create a temporary file for the secret
          cat > secret.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: chatwoot-secrets
          type: Opaque
          stringData:
            DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USERNAME }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DATABASE }}?sslmode=require"
            POSTGRES_HOST: "${{ secrets.POSTGRES_HOST }}"
            POSTGRES_PORT: "${{ secrets.POSTGRES_PORT }}"
            POSTGRES_DATABASE: "${{ secrets.POSTGRES_DATABASE }}"
            POSTGRES_USERNAME: "${{ secrets.POSTGRES_USERNAME }}"
            POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
            REDIS_URL: "${{ secrets.REDIS_URL }}"
            REDIS_PASSWORD: "${{ secrets.REDIS_PASSWORD }}"
            REDIS_HOST: "${{ secrets.REDIS_HOST }}"
            REDIS_PORT: "${{ secrets.REDIS_PORT }}"
            SECRET_KEY_BASE: "${{ secrets.SECRET_KEY_BASE }}"
            SMTP_USERNAME: "${{ secrets.SMTP_USERNAME }}"
            SMTP_PASSWORD: "${{ secrets.SMTP_PASSWORD }}"
            DOMAIN: "${{ secrets.DOMAIN || 'cx.alooo.ai' }}"
          EOF
          
          # Create the secret
          kubectl create -f secret.yaml
          
          # Clean up
          rm secret.yaml
      
      - name: Deploy to Kubernetes
        run: |
          # Export the Docker username for envsubst
          export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          
          # Apply deployments and services with environment variable substitution
          echo "Applying deployments and services..."
          kubectl apply -f k8s/rails-deployment.yaml
          kubectl apply -f k8s/vite-deployment.yaml
          kubectl apply -f k8s/sidekiq-deployment.yaml
          kubectl apply -f k8s/mailhog-deployment.yaml
          
          # Check if direct LoadBalancer services already exist
          echo "Checking if LoadBalancer services already exist..."
          if ! kubectl get service chatwoot-rails-lb &>/dev/null || ! kubectl get service chatwoot-vite-lb &>/dev/null; then
            # Clean up any existing Ingress resources to avoid conflicts
            echo "Cleaning up existing Ingress resources..."
            kubectl delete ingress chatwoot-ingress --ignore-not-found=true
            kubectl delete service ingress-nginx-loadbalancer -n ingress-nginx --ignore-not-found=true
            
            # Apply direct expose services
            echo "LoadBalancer services do not exist. Creating them..."
            kubectl apply -f k8s/loadbalancer.yaml
          else
            echo "LoadBalancer services already exist. Skipping creation."
          fi
          
          # Wait for deployments with increased timeout
          echo "Waiting for Rails deployment..."
          kubectl rollout status deployment/chatwoot-rails --timeout=300s || {
            echo "Rails deployment failed. Checking status..."
            kubectl get pods -l app=chatwoot-rails
            kubectl describe deployment chatwoot-rails
            kubectl get events --sort-by='.lastTimestamp'
            kubectl logs -l app=chatwoot-rails --tail=100
            exit 1
          }
          
          echo "Waiting for Vite deployment..."
          kubectl rollout status deployment/chatwoot-vite --timeout=300s || {
            echo "Vite deployment failed. Checking status..."
            kubectl get pods -l app=chatwoot-vite
            kubectl describe deployment chatwoot-vite
            kubectl get events --sort-by='.lastTimestamp'
            kubectl logs -l app=chatwoot-vite --tail=100
            exit 1
          }
          
          echo "Waiting for Sidekiq deployment..."
          kubectl rollout status deployment/chatwoot-sidekiq --timeout=300s || {
            echo "Sidekiq deployment failed. Checking status..."
            kubectl get pods -l app=chatwoot-sidekiq
            kubectl describe deployment chatwoot-sidekiq
            kubectl get events --sort-by='.lastTimestamp'
            kubectl logs -l app=chatwoot-sidekiq --tail=100
            exit 1
          }
          
          echo "Waiting for Mailhog deployment..."
          kubectl rollout status deployment/chatwoot-mailhog --timeout=300s || {
            echo "Mailhog deployment failed. Checking status..."
            kubectl get pods -l app=chatwoot-mailhog
            kubectl describe deployment chatwoot-mailhog
            kubectl get events --sort-by='.lastTimestamp'
            kubectl logs -l app=chatwoot-mailhog --tail=100
            exit 1
          }
          
          # Check all pods are running
          echo "Checking all pods are running..."
          kubectl get pods
          
          # Check services
          echo "Checking services..."
          kubectl get services
          
          # Get LoadBalancer external IPs
          echo "Getting LoadBalancer external IPs..."
          RAILS_IP=$(kubectl get service chatwoot-rails-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          VITE_IP=$(kubectl get service chatwoot-vite-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          
          if [ -n "$RAILS_IP" ]; then
            echo "✅ Rails application is accessible at: http://$RAILS_IP"
            echo "✅ Vite server is accessible at: http://$VITE_IP:3036"
            echo "CHATWOOT_URL=http://$RAILS_IP" >> $GITHUB_ENV
            
            # Update ConfigMap with the correct domain
            echo "Updating ConfigMap with the correct domain..."
            if [ -n "${{ secrets.DOMAIN }}" ]; then
              DOMAIN="${{ secrets.DOMAIN }}"
              echo "Using custom domain: $DOMAIN"
              kubectl patch configmap chatwoot-config --type=merge -p "{\"data\":{\"DOMAIN\":\"$DOMAIN\",\"FRONTEND_URL\":\"https://$DOMAIN\",\"VITE_APP_URL\":\"https://$DOMAIN\"}}"
            else
              echo "Using LoadBalancer IP as domain"
              kubectl patch configmap chatwoot-config --type=merge -p "{\"data\":{\"DOMAIN\":\"$RAILS_IP\",\"FRONTEND_URL\":\"http://$RAILS_IP\",\"VITE_APP_URL\":\"http://$RAILS_IP\"}}"
            fi
            
            # Restart deployments to pick up new ConfigMap values
            echo "Restarting deployments to pick up new ConfigMap values..."
            kubectl rollout restart deployment chatwoot-rails
            kubectl rollout restart deployment chatwoot-vite
          else
            echo "⚠️ LoadBalancer external IP not available yet."
            echo "You can check the status later with: kubectl get service chatwoot-rails-lb"
          fi
