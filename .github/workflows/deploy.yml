name: Deploy to Kubernetes (Production)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      
      - name: Build and push base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-base:v1.0.14
      
      - name: Build and push Rails image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dockerfiles/rails.Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-rails:v1.0.14
      
      - name: Build and push Vite image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/dockerfiles/vite.Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/chatwoot-vite:v1.0.14

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Check for existing cluster
        id: check-cluster
        run: |
          if doctl kubernetes cluster list --format Name | grep -q "chatwoot-cluster"; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "Using existing cluster..."
            doctl kubernetes cluster kubeconfig save chatwoot-cluster
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create terraform.tfvars
        run: |
          cat > terraform/terraform.tfvars << EOL
          do_token = "${{ secrets.DO_TOKEN }}"
          region = "${{ secrets.REGION }}"
          environment = "${{ secrets.ENVIRONMENT }}"
          EOL
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Apply
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          cd terraform
          terraform apply -auto-approve
      
      - name: Configure kubectl if cluster was just created
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          echo "Waiting for cluster to be ready after Terraform apply..."
          sleep 60
          doctl kubernetes cluster kubeconfig save chatwoot-cluster
      
      - name: Update Kubernetes ConfigMap
        run: |
          kubectl apply -f k8s/production/configmap.yaml
      
      - name: Create Kubernetes Secrets
        run: |
          kubectl delete secret chatwoot-secrets --ignore-not-found=true
          cat > secret.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: chatwoot-secrets
          type: Opaque
          stringData:
            DATABASE_URL: "postgresql://${{ secrets.PRODUCTION_POSTGRES_USERNAME }}:${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}@${{ secrets.PRODUCTION_POSTGRES_HOST }}:${{ secrets.PRODUCTION_POSTGRES_PORT }}/${{ secrets.PRODUCTION_POSTGRES_DATABASE }}?sslmode=require"
            POSTGRES_HOST: "${{ secrets.PRODUCTION_POSTGRES_HOST }}"
            POSTGRES_PORT: "${{ secrets.PRODUCTION_POSTGRES_PORT }}"
            POSTGRES_DATABASE: "${{ secrets.PRODUCTION_POSTGRES_DATABASE }}"
            POSTGRES_USERNAME: "${{ secrets.PRODUCTION_POSTGRES_USERNAME }}"
            POSTGRES_PASSWORD: "${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}"
            REDIS_URL: "${{ secrets.PRODUCTION_REDIS_URL }}"
            REDIS_PASSWORD: "${{ secrets.PRODUCTION_REDIS_PASSWORD }}"
            REDIS_HOST: "${{ secrets.PRODUCTION_REDIS_HOST }}"
            REDIS_PORT: "${{ secrets.PRODUCTION_REDIS_PORT }}"
            SECRET_KEY_BASE: "${{ secrets.SECRET_KEY_BASE }}"
            DOMAIN: "${{ secrets.DOMAIN || 'cx.aloochat.ai' }}"
            ACTIVE_STORAGE_SERVICE: "${{ secrets.ACTIVE_STORAGE_SERVICE }}"
            S3_BUCKET_NAME: "${{ secrets.S3_BUCKET_NAME }}"
            AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
            AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            AWS_REGION: "${{ secrets.AWS_REGION }}"
            OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
            FORCE_SSL: "${{ secrets.FORCE_SSL }}"
            CLERK_WEBHOOK_SECRET: "${{ secrets.PRODUCTION_CLERK_WEBHOOK_SECRET }}"
            ALOOSTUDIO_API_TOKEN: "${{ secrets.ALOOSTUDIO_API_TOKEN }}"
            ALOOSTUDIO_WEBHOOK_URL: "${{ secrets.PRODUCTION_ALOOSTUDIO_WEBHOOK_URL }}"
            SMTP_PASSWORD: "${{ secrets.SMTP_PASSWORD }}"
            SMTP_USERNAME: "${{ secrets.SMTP_USERNAME }}"
            SMTP_ADDRESS: "${{ secrets.SMTP_ADDRESS }}"
            SMTP_PORT: "${{ secrets.SMTP_PORT }}"
            SMTP_DOMAIN: "${{ secrets.SMTP_DOMAIN }}"
            SMTP_AUTHENTICATION: "${{ secrets.SMTP_AUTHENTICATION }}"
            SMTP_ENABLE_STARTTLS_AUTO: "${{ secrets.SMTP_ENABLE_STARTTLS_AUTO }}"
            SMTP_OPENSSL_VERIFY_MODE: "${{ secrets.SMTP_OPENSSL_VERIFY_MODE }}"
            MAILER_INBOUND_EMAIL_DOMAIN: "${{ secrets.MAILER_INBOUND_EMAIL_DOMAIN }}"
            RAILS_INBOUND_EMAIL_SERVICE: "${{ secrets.RAILS_INBOUND_EMAIL_SERVICE }}"
            MAILER_SENDER_EMAIL: "${{ secrets.MAILER_SENDER_EMAIL }}"   
            ALOOSTUDIO_BACKEND_URL: "${{ secrets.PRODUCTION_ALOOSTUDIO_BACKEND_URL }}"
            ALOOSTUDIO_FRONTEND_URL: "${{ secrets.PRODUCTION_ALOOSTUDIO_FRONTEND_URL }}"      
            SMTP_OPEN_TIMEOUT: "60"
            SMTP_READ_TIMEOUT: "60"

          EOF
          kubectl create -f secret.yaml
          rm secret.yaml
      
      - name: Deploy AlooChat to Kubernetes in ingress-nginx namespace
        run: |
          # Set namespace
          NAMESPACE=ingress-nginx

          # Apply deployments & services
          echo "Applying deployments and services in namespace default..."
          kubectl apply -n default -f k8s/production/rails-deployment.yaml
          kubectl apply -n default -f k8s/production/vite-deployment.yaml
          kubectl apply -n default -f k8s/production/sidekiq-deployment.yaml
          kubectl apply -n default -f k8s/production/mailhog-deployment.yaml


          # Wait for all deployments to be ready
          echo "Waiting for Rails deployment..."
          kubectl rollout status deployment/chatwoot-rails -n default --timeout=300s
          
          echo "Waiting for Vite deployment..."
          kubectl rollout status deployment/chatwoot-vite -n default --timeout=300s
          
          echo "Waiting for Sidekiq deployment..."
          kubectl rollout status deployment/chatwoot-sidekiq -n default --timeout=300s
          
          echo "Waiting for Mailhog deployment..."
          kubectl rollout status deployment/chatwoot-mailhog -n default --timeout=300s

          # Final status checks
          echo "Pods status:"
          kubectl get pods -n default

          echo "Services status:"
          kubectl get svc -n default

          echo "Ingress status:"
          kubectl get ingress -n default
        